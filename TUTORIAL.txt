$ bin/templer plone_basic

- add travis-ci conf

- run tests

- configure travis-ci

- run travis-ci

Dexterity
---------

test_setup.py::

    def test_dexterity_is_installed(self):
        pid = 'plone.app.dexterity'
        installed = [p['id'] for p in self.qi_tool.listInstalledProducts()]
        self.assertTrue(
            pid in installed,
            'package %s appears not to have been installed' % pid
        )

setup.py::

      install_requires=[
          'setuptools',
          'plone.app.dexterity',
      ],

profiles/default/metadata.xml::

    <?xml version="1.0"?>
    <metadata>
      <version>0001</version>
      <dependencies>
        <dependency>profile-plone.app.dexterity:default</dependency>
      </dependencies>
    </metadata>

configure.zcml::

    <includeDependencies package="." />

Message Board Content Type
--------------------------

"As an administrator I can add a message board."

test_messageboard.py::

    from zope.component import createObject
    from zope.component import queryUtility
    from plone.dexterity.interfaces import IDexterityFTI
    import unittest2 as unittest

    from plone.app.testing import setRoles
    from plone.app.testing import TEST_USER_ID

    from collective.ploneboard.testing import \
        COLLECTIVE_PLONEBOARD_INTEGRATION_TESTING


    class MessageBoardIntegrationTest(unittest.TestCase):

        layer = COLLECTIVE_PLONEBOARD_INTEGRATION_TESTING

        def setUp(self):
            self.portal = self.layer['portal']
            self.request = self.layer['request']
            self.request['ACTUAL_URL'] = self.portal.absolute_url()
            setRoles(self.portal, TEST_USER_ID, ['Manager'])

        def test_fti(self):
            from collective.ploneboard.interfaces import IMessageboard
            fti = queryUtility(
                IDexterityFTI,
                name='messageboard'
            )
            schema = fti.lookupSchema()
            self.assertEquals(IMessageboard, schema)

        def test_factory(self):
            fti = queryUtility(
                IDexterityFTI,
                name='messageboard'
            )
            factory = fti.factory
            new_object = createObject(factory)
            self.failUnless(IMessageboard.providedBy(new_object))

        def test_adding(self):
            self.portal.invokeFactory(
                'messageboard',
                'board')
            board = self.portal['board']
            self.failUnless(IMessageboard.providedBy(board))


test output::

    raise AccessControl_Unauthorized('Cannot create %s' % self.getId())
    Unauthorized: Cannot create messageboard

configure.zcml::

  <include file="permissions.zcml" />

permissions.zcml::

  <configure
      xmlns="http://namespaces.zope.org/zope"
      xmlns:i18n="http://namespaces.zope.org/i18n"
      i18n_domain="collective.ploneboard">

    <permission
        id="ploneboard.AddMessageboard"
        title="Collective Ploneboard: Add Message Board"
        />

  </configure>

test_integration.py::

    # -*- coding: utf-8 -*-
    from plone.app.testing import SITE_OWNER_NAME
    from plone.app.testing import SITE_OWNER_PASSWORD
    from plone.testing.z2 import Browser
    import unittest2 as unittest

    from collective.ploneboard.testing import \
        COLLECTIVE_PLONEBOARD_INTEGRATION_TESTING


    class PloneboardContenttypesIntegrationTest(unittest.TestCase):

        layer = COLLECTIVE_PLONEBOARD_INTEGRATION_TESTING

        def setUp(self):
            app = self.layer['app']
            self.portal = self.layer['portal']
            self.request = self.layer['request']
            self.portal_url = self.portal.absolute_url()
            self.browser = Browser(app)
            self.browser.handleErrors = False
            self.browser.addHeader(
                'Authorization',
                'Basic %s:%s' % (SITE_OWNER_NAME, SITE_OWNER_PASSWORD),
            )

        def test_add_ploneboard(self):
            """As an administrator I can add a message board.
            """
            self.browser.open(self.portal_url)
            self.browser.getLink('Message Board').click()
            self.browser.getControl(
                name='form.widgets.IBasic.title'
            ).value = "My Message Board"
            self.browser.getControl(
                name='form.widgets.IBasic.description'
            ).value = "Lorem ipsum"
            self.browser.getControl("Save").click()
            self.assertTrue("My Message Board" in self.browser.contents)
            self.assertTrue("Lorem ipsum" in self.browser.contents)

Add Topic
---------

- Global allow false
=> failing test

    raise ValueError('Disallowed subobject type: %s' % type_name)
    ValueError: Disallowed subobject type: topic

Skip test_adding in test_topic.py::

    @unittest.skip("demonstrating skipping")
    def test_adding(self):
        self.portal.invokeFactory(
            'topic',
            'mytopic')
        new_object = self.portal['mytopic']
        self.failUnless(ITopic.providedBy(new_object))

Create new test::

    def test_global_allow_not_allowed(self):
        self.assertRaises(
            ValueError,
            self.portal.invokeFactory,
            'topic',
            'my-topic',
        )

Remove decorator from test_adding => failing test.

Fix test_adding::


Conversation: same as topic...

test_conversation.py::

    def test_conversation_enabled(self):
        from plone.app.discussion.interfaces import IDiscussionLayer
        from zope.interface import alsoProvides
        alsoProvides(
            self.portal.REQUEST,
            IDiscussionLayer
        )

        self.portal.invokeFactory(
            'messageboard',
            'board'
        )
        self.portal.board.invokeFactory(
            'topic',
            'topic'
        )
        self.portal.board.topic.invokeFactory(
            'conversation',
            'conversation'
        )
        obj = self.portal.board.topic['conversation']
        conv = obj.restrictedTraverse('@@conversation_view')
        self.assertTrue(conv.enabled())


test_integration.py::

        # Add reply
        self.browser.getControl(
            name='form.widgets.text'
        ).value = "This is my first reply."
        self.browser.getControl(name="form.buttons.comment").click()
        self.assertTrue("This is my first reply" in self.browser.contents)

Discussion for conversation type.
---------------------------------

Allow globally - test_setup.py::

    def test_discussion_is_globally_allowed(self):
        from zope.component import queryUtility
        from plone.registry.interfaces import IRegistry
        from plone.app.discussion.interfaces import IDiscussionSettings
        registry = queryUtility(IRegistry)
        settings = registry.forInterface(IDiscussionSettings)
        self.assertEqual(settings.globally_enabled, True)

profiles/default/registry.xml::

    <registry>
      <record
        field="globally_enabled"
        interface="plone.app.discussion.interfaces.IDiscussionSettings"
        name="plone.app.discussion.interfaces.IDiscussionSettings.globally_enabled">
        <value>True</value>
      </record>
    </registry>

Allow for conversation content type - conversation.xml::

  <property name="allow_discussion">True</property>


Messageboard View
-----------------

As a member I can view the latest conversation on the message board grouped by topics.

test_messageboard.py::

    def test_conversations_method(self):
        self.portal.board.invokeFactory('topic', 'topic1')
        self.portal.board.invokeFactory('topic', 'topic2')
        from collective.ploneboard.browser.messageboard import MessageboardView

        view = MessageboardView(self.portal.board, self.request)

        self.assertEqual(len(view.conversations()), 2)

Test failure::

    AttributeError: 'MessageboardView' object has no attribute 'conversations'

browser/messageboard.py MessageboardView::

    def conversations(self):
        return ['foo', 'bar']

=> Test green.

=> Refactor

test::
        self.assertEqual(
            [x['title'] for x in conversations],
            ['Topic 1', 'Topic 2']
        )

code::
        return [
            {'title': 'Topic 1', 'conversations': []},
            {'title': 'Topic 2', 'conversations': []},
        ]

code refactor::

    def conversations(self):
        output = []
        for topic_id in self.context.objectIds():
            topic = self.context[topic_id]
            topic.title
            output.append({'title': topic.title, 'conversations': []})
        return output

test_conversations::

    def test_conversation_returns_conversations(self):
        self.portal.board.invokeFactory('topic', id='topic1', title='Topic 1')
        self.portal.board.topic1.invokeFactory(
            'conversation',
            id='conv1',
            title='Conversation 1'
        )
        self.portal.board.topic1.invokeFactory(
            'conversation',
            id='conv2',
            title='Conversation 2'
        )
        from collective.ploneboard.browser.messageboard import MessageboardView
        view = MessageboardView(self.portal.board, self.request)

        conversations = view.conversations()

        self.assertEqual(len(conversations), 1)
        self.assertEqual(
            conversations[0]['conversations'],
            []
        )


REFACTOR: conversations method => topics method::

    <div tal:repeat="topic view/topics">
      <h2 tal:content="topic/title"></h2>
      <div tal:repeat="conversation topic/conversations">
        <a tal:content="conversation/title"
           tal:attributes="href conversation/url">Conversation</a>
      </div>
    </div>

=> does not make sense with tal:repeat="topic view/conversations"

=> refactor with confidence

TODO templer:

- remove initialize function
- remove testing profile